# An object with an ID
interface Node {
  id: ID!
}


type User implements Node {
  id: ID!
  _id: ID!
  username: String!
  email: String!
  emailConfirmed: Boolean!
  styles: [Page]
  home: Page
  pagesCreated: Page
}

type Page implements Node {
  id: ID!
  _id: ID!
  path: String
  public: Boolean
  viewers: [User]
  type: String
  tags: [Page]
  order: Int
  title: String
  subtitle: String
  description: String
  image: Page
  creators: [User]
  created: String
  lastUpdated: String
  value: String
  blob: String
  page: Page
  pageList: [Page]
  pageEdge (after: String, first: Int, before: String, last: Int): PageConnection
}

# A connection to a list of items.
type PageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [PageEdge]
}

# An edge in a connection.
type PageEdge {
  # The item at the end of the edge
  node: Page
  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}


type Query {
  node(
    # The ID of an object
    id: ID!
  ): Node
  user( _id: String ): User
  pageByPath( path: String ): Page
  users: [User]
  pages (after: String, first: Int, before: String, last: Int): PageConnection

}
