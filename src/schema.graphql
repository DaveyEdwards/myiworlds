# An object with an ID
interface Node {
  id: ID!
}

type NewsItem {
  title: String!
  link: String!
  author: String
  pubDate: String!
  content: String
}

type Query {
  me: User
  news: [NewsItem]
  viewer: Person
  n0deEdge(after: String, first: Int, before: String, last: Int): N0deConnection
}

input createN0deInput {
  type: String!
  clientMutationId: String
}

type createN0dePayload {
  createdN0de: N0de
  viewer: Person
  clientMutationId: String
}

type Mutation {
  createN0de(input: createN0deInput!): createN0dePayload
}

type User {
  id: ID!
  email: String
}

type N0de implements Node {
  id: ID!
  _id: ID
  title: String
  path: String
  type: String
  public: Boolean
  viewers: [Person]
  styles: N0de
  tags(after: String, first: Int, before: String, last: Int): N0deConnection
  order: Int
  subtitle: String
  description: String
  media: N0de
  creator: Person
  editors: [Person]
  created: String
  lastUpdated: String
  value: String
  blob: String
  number: Int
  boolean: Boolean
  n0de: N0de
  n0deList: [N0de]
  n0deEdge(after: String, first: Int, before: String, last: Int): N0deConnection
}

type Person implements Node {
  id: ID!
  _id: ID!
  username: String!
  email: String!
  emailConfirmed: String
  styles: [N0de]
  home: N0de
  n0deByPath(path: String): N0de
}

# A connection to a list of items.
type N0deConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [N0deEdge]
}

# An edge in a connection.
type N0deEdge {
  # The item at the end of the edge
  node: N0de
  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}
