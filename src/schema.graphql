# An object with an ID
interface Node {
  id: ID!
}

type NewsItem {
  title: String!
  link: String!
  author: String
  pubDate: String!
  content: String
}

type Query {
  me: User
  news: [NewsItem]
  things (after: String, first: Int, before: String, last: Int): ThingConnection
}

type User {
  id: ID!
  email: String
}



type Thing implements Node {
  id: ID!
  _id: ID!
  title: String
}

# A connection to a list of items.
type ThingConnection {
  # Information to aid in pagination.
  pageInfo: ThingInfo!
  # A list of edges.
  edges: [ThingEdge]
}

# An edge in a connection.
type ThingEdge {
  # The item at the end of the edge
  node: Thing
  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type ThingInfo {
  # When paginating forwards, are there more items?
  hasNextThing: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousThing: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}
